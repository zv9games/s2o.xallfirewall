use crossbeam_channel::{Sender, Receiver}; // Ensure using crossbeam_channel
use eframe::{egui, epi};

pub fn create_output_window(rx: Receiver<String>) {
    let options = eframe::NativeOptions {
        initial_window_size: Some(egui::Vec2::new(300.0, 300.0)),
        initial_window_pos: Some(egui::Pos2::new(100.0, 100.0)),
        ..Default::default()
    };

    // Run native should be on the main thread
    eframe::run_native(
        Box::new(OutputApp::new(rx)),
        options,
    );
}

pub fn load_module(tx: Sender<String>) -> Result<(), Box<dyn std::fmt::Debug>> {
    tx.send("interface1 module loaded.".to_string()).map_err(|e| Box::new(e) as Box<dyn std::fmt::Debug>)?;
    println!("Sent: interface1 module loaded.");
    Ok(())
}

pub struct OutputApp {
    bg_color: egui::Color32,
    messages: Vec<String>,
    rx: Receiver<String>,
}

impl OutputApp {
    pub fn new(rx: Receiver<String>) -> Self {
        Self {
            bg_color: egui::Color32::from_rgb(0, 0, 0),
            messages: vec![],
            rx,
        }
    }

    fn add_message(&mut self, message: String) {
        self.messages.push(message);
    }

    fn update_messages(&mut self) {
        while let Ok(msg) = self.rx.try_recv() {
            println!("Received message: {}", msg);
            self.add_message(msg);
        }
    }
}

impl epi::App for OutputApp {
    fn update(&mut self, ctx: &egui::Context, frame: &eframe::epi::Frame) {
        self.update_messages();
        egui::CentralPanel::default().frame(egui::Frame::default().fill(self.bg_color)).show(ctx, |ui| {
            for msg in &self.messages {
                ui.label(egui::RichText::new(msg).color(egui::Color32::WHITE));
            }
        });

        // Request a frame update
        frame.request_repaint();
    }

    fn name(&self) -> &str {
        "Output Window"
    }
}
